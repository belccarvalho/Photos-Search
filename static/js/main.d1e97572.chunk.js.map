{"version":3,"sources":["components/Search.jsx","components/EachPhoto.jsx","components/Results.jsx","App.js","components/usePhotoSearch.jsx","index.js"],"names":["Search","props","TextField","label","size","variant","value","query","onInput","e","setQuery","target","Button","color","onClick","setSearchOn","prevSearchOn","EachPhoto","className","src","photo","cover_photo","urls","regular","alt","alt_description","title","Results","photos","hasMore","setPageNumber","observer","useRef","lastPhotoElementRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","console","log","prevPageNumber","observe","filteredPhotos","filter","item","map","index","length","ref","App","useState","pageNumber","searchOn","setPhotos","setHasMore","useEffect","axios","get","then","res","data","results","total_pages","catch","err","usePhotoSearch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAKe,SAASA,EAAOC,GAmB7B,OACE,gCACE,cAACC,EAAA,EAAD,CACEC,MAAM,gBACNC,KAAK,QACLC,QAAQ,WACRC,MAAOL,EAAMM,MAEbC,QAzBW,SAACC,GAChBR,EAAMS,SAASD,EAAEE,OAAOL,UA0BtB,cAACM,EAAA,EAAD,CAAQP,QAAQ,WAAWQ,MAAM,UAAUC,QAAS,WAElDb,EAAMc,aAAY,SAACC,GAAD,OAAkBA,MAFtC,uBC/BS,SAASC,EAAUhB,GAChC,OACE,8BACE,sBAAKiB,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAeC,IAAKlB,EAAMmB,MAAMC,YAAYC,KAAKC,QAASC,IAAI,aAC7E,qBAAKN,UAAU,YAAf,SACE,oBAAIA,UAAU,aAAd,SAA4BjB,EAAMmB,MAAMC,YAAYI,iBAAmBxB,EAAMmB,MAAMM,eCN9E,SAASC,EAAQ1B,GAAQ,IAC9B2B,EAAmC3B,EAAnC2B,OAAQC,EAA2B5B,EAA3B4B,QAASC,EAAkB7B,EAAlB6B,cAEnBC,EAAWC,mBAIXC,EAAsBC,uBAC1B,SAACC,GACKJ,EAASK,SACXL,EAASK,QAAQC,aAEnBN,EAASK,QAAU,IAAIE,sBAAqB,SAACC,GACvCA,EAAQ,GAAGC,gBAAkBX,IAC/BY,QAAQC,IAAI,WACZZ,GAAc,SAACa,GAAD,OAAkBA,EAAe,SAG/CR,GACFJ,EAASK,QAAQQ,QAAQT,KAG7B,CAACN,IAGCgB,EAAiBjB,EAAOkB,QAAO,SAACC,GAAD,OAASA,EAAK1B,eAEjD,OACE,qBAAKH,UAAU,eAAf,SACG2B,EAAeG,KAAI,SAACD,EAAME,GACzB,OAAIF,EAAK1B,YACH4B,IAAUJ,EAAeK,OAAS,EAElC,qBAAKC,IAAKlB,EAAV,SACE,cAAChB,EAAD,CAAWG,MAAO2B,KADgBE,GAMpC,8BACE,cAAChC,EAAD,CAAWG,MAAO2B,KADTE,GAMV,U,YCzBAG,MAjBf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACN9C,EADM,KACCG,EADD,OAEuB2C,mBAAS,GAFhC,mBAENC,EAFM,KAEMxB,EAFN,OAGmBuB,oBAAS,GAH5B,mBAGNE,EAHM,KAGIxC,EAHJ,OCAA,SAAwBR,EAAO+C,EAAYC,GAAW,IAAD,EACtCF,mBAAS,IAD6B,mBAC3DzB,EAD2D,KACnD4B,EADmD,OAEpCH,oBAAS,GAF2B,mBAE3DxB,EAF2D,KAElD4B,EAFkD,KA2BlE,OArBAC,qBAAU,WACRF,EAAU,MACT,CAACjD,IAEJmD,qBAAU,WACRC,IACGC,IADH,mHAEgHrD,EAFhH,iBAE8H+C,IAE3HO,MAAK,SAACC,GACLrB,QAAQC,IAAIoB,EAAIC,KAAKC,SACrBR,EAAU,GAAD,mBAAK5B,GAAL,YAAgBkC,EAAIC,KAAKC,WAElCP,EAAWK,EAAIC,KAAKE,YAAcX,MAEnCY,OAAM,SAACC,GACN1B,QAAQC,IAAIyB,QAGf,CAACb,EAAYC,IAET,CAAC3B,EAAQC,GDtBUuC,CAAe7D,EAAO+C,EAAYC,GAL/C,mBAKN3B,EALM,KAKEC,EALF,KAMb,OACE,sBAAKX,UAAU,MAAf,UACE,cAAClB,EAAD,CAAQO,MAAOA,EAAOG,SAAUA,EAAUK,YAAaA,IACvD,cAACY,EAAD,CACAC,OAAQA,EACRC,QAASA,EACTC,cAAeA,QEZrBuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d1e97572.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport axios from \"axios\";\n\nexport default function Search(props) {\n  // const [input, setInput] = useState(\"\");\n  const getValue = (e) => {\n    props.setQuery(e.target.value);\n  };\n\n  const fetchPhotos = (input) => {\n    axios\n      .get(\n        `https://api.unsplash.com/search/collections/?client_id=j9bQjfT_YyUFBte48Ewb8Q58-tYlHNiThtbzHJ8Y6oE&query=${input}`\n      )\n      .then((res) => {\n        console.log(res.data.results);\n        props.setPhotos(res.data.results);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  return (\n    <div>\n      <TextField\n        label=\"Searched item\"\n        size=\"small\"\n        variant=\"outlined\"\n        value={props.query}\n        //dont use parentesis\n        onInput={getValue}\n      />\n      <Button variant=\"outlined\" color=\"primary\" onClick={()=>{\n        //in this way we just change the previous value to the opposite value, \n        props.setSearchOn((prevSearchOn)=> !prevSearchOn);\n        //this second approach is also possible, but I should import also the searchOn variable. \n        // props.setSearchOn(!searchOn);\n      }}>\n        SEARCH\n      </Button>\n    </div>\n  );\n}\n","import React from \"react\";\n\n\nexport default function EachPhoto(props) {\n  return (\n    <div>\n      <div className=\"card\" >\n        <img className=\"card-img-top\" src={props.photo.cover_photo.urls.regular} alt=\"Card pic\" />\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{props.photo.cover_photo.alt_description || props.photo.title}</h5>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useRef, useCallback } from \"react\";\nimport EachPhoto from \"./EachPhoto\";\n\nexport default function Results(props) {\n  const { photos, hasMore, setPageNumber } = props;\n  //when we rerender the component, everything change, but by using useRef(). This function return one object with property \"current\" with the value of null\n  const observer = useRef();\n\n  //the function inside callback function will happen just when the variable inside of [] changes. Really similar to useEffect BUT IS CONNECT WITH SOME VARIABLE AND STORED INSIDE OF IT.\n  //node refers to the <div> which was returned element\n  const lastPhotoElementRef = useCallback(\n    (node) => {\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting && hasMore) {\n          console.log(\"visible\");\n          setPageNumber((prevPageNumber)=>prevPageNumber+1)\n        }\n      });\n      if (node) {\n        observer.current.observe(node);\n      }\n    },\n    [hasMore]\n  );\n\n  let filteredPhotos = photos.filter((item)=> item.cover_photo);\n\n  return (\n    <div className=\"card-columns\">\n      {filteredPhotos.map((item, index) => {\n        if (item.cover_photo) {\n          if (index === filteredPhotos.length - 1) {\n            return (\n              <div ref={lastPhotoElementRef} key={index}>\n                <EachPhoto photo={item} />\n              </div>\n            );\n          } else {\n            return (\n              <div  key={index}>\n                <EachPhoto photo={item} />\n              </div>\n            );\n          }\n        }\n        return null;\n      })}\n    </div>\n  );\n}\n","import \"./App.css\";\nimport Search from \"./components/Search\";\nimport { useState } from \"react\";\nimport Results from \"./components/Results\";\nimport usePhotoSearch from \"./components/usePhotoSearch\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [pageNumber, setPageNumber] = useState(1);\n  const [searchOn, setSearchOn] = useState(false);\n\n  const [photos, hasMore] = usePhotoSearch(query, pageNumber, searchOn);\n  return (\n    <div className=\"App\">\n      <Search query={query} setQuery={setQuery} setSearchOn={setSearchOn} />\n      <Results \n      photos={photos} \n      hasMore={hasMore} \n      setPageNumber={setPageNumber} />\n    </div>\n  );\n}\n\nexport default App;\n","//when we create a Hook, it usually starts with \"use\"\n//we don't read anything in Hook\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nexport default function usePhotoSearch(query, pageNumber, searchOn) {\n  const [photos, setPhotos] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n\n  //this useEffect function will reset the photos and delete the last search and start another one, otherwise it would add the phots from new search after the ones from the last research\n\n  useEffect(() => {\n    setPhotos([]);\n  }, [query]);\n  //useEffect is used to run a function just when a condition is attended\n  useEffect(() => {\n    axios\n      .get(\n        `https://api.unsplash.com/search/collections/?client_id=j9bQjfT_YyUFBte48Ewb8Q58-tYlHNiThtbzHJ8Y6oE&query=${query}&page=${pageNumber}`\n      )\n      .then((res) => {\n        console.log(res.data.results);\n        setPhotos([...photos, ...res.data.results]);\n        //if the condition inside of parentheses is true, it will change the value of hasMore to true\n        setHasMore(res.data.total_pages > pageNumber)\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    //ehen the variable inde [] changes -> the function below will run\n  }, [pageNumber, searchOn]);\n\n  return [photos, hasMore];\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}