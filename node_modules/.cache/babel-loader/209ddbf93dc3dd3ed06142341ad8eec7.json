{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useRef,useCallback}from\"react\";import EachPhoto from\"./EachPhoto\";export default function Results(props){var photos=props.photos,hasMore=props.hasMore,setPageNumber=props.setPageNumber;//when we rerender the component, everything change, but by using useRef(). This function return one object with property \"current\" with the value of null\nvar observer=useRef();//the function inside callback function will happen just when the variable inside of [] changes. Really similar to useEffect BUT IS CONNECT WITH SOME VARIABLE AND STORED INSIDE OF IT.\n//node refers to the <div> which was returned element\nvar lastPhotoElementRef=useCallback(function(node){if(observer.current){observer.current.disconnect();}observer.current=new IntersectionObserver(function(entries){if(entries[0].isIntersecting&&hasMore){setPageNumber(function(prevPageNumber){return prevPageNumber+1;});}});if(node){observer.current.observe(node);}},[hasMore]);var filteredPhotos=photos.filter(function(item){return item.cover_photo;});return/*#__PURE__*/_jsx(\"div\",{className:\"card-columns\",children:filteredPhotos.map(function(item,index){if(item.cover_photo){if(index===filteredPhotos.length-1){return/*#__PURE__*/_jsx(\"div\",{ref:lastPhotoElementRef,children:/*#__PURE__*/_jsx(EachPhoto,{photo:item})},index);}else{return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(EachPhoto,{photo:item})},index);}}return null;})});}","map":{"version":3,"sources":["/home/dci/Documents/React/PicPhotos/photos/src/components/Results.jsx"],"names":["React","useRef","useCallback","EachPhoto","Results","props","photos","hasMore","setPageNumber","observer","lastPhotoElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe","filteredPhotos","filter","item","cover_photo","map","index","length"],"mappings":"2CAAA,MAAOA,CAAAA,KAAP,EAAgBC,MAAhB,CAAwBC,WAAxB,KAA2C,OAA3C,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CAEA,cAAe,SAASC,CAAAA,OAAT,CAAiBC,KAAjB,CAAwB,IAC7BC,CAAAA,MAD6B,CACMD,KADN,CAC7BC,MAD6B,CACrBC,OADqB,CACMF,KADN,CACrBE,OADqB,CACZC,aADY,CACMH,KADN,CACZG,aADY,CAErC;AACA,GAAMC,CAAAA,QAAQ,CAAGR,MAAM,EAAvB,CAEA;AACA;AACA,GAAMS,CAAAA,mBAAmB,CAAGR,WAAW,CACrC,SAACS,IAAD,CAAU,CACR,GAAIF,QAAQ,CAACG,OAAb,CAAsB,CACpBH,QAAQ,CAACG,OAAT,CAAiBC,UAAjB,GACD,CACDJ,QAAQ,CAACG,OAAT,CAAmB,GAAIE,CAAAA,oBAAJ,CAAyB,SAACC,OAAD,CAAa,CACvD,GAAIA,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAX,EAA6BT,OAAjC,CAA0C,CACxCC,aAAa,CAAC,SAACS,cAAD,QAAkBA,CAAAA,cAAc,CAAC,CAAjC,EAAD,CAAb,CACD,CACF,CAJkB,CAAnB,CAKA,GAAIN,IAAJ,CAAU,CACRF,QAAQ,CAACG,OAAT,CAAiBM,OAAjB,CAAyBP,IAAzB,EACD,CACF,CAboC,CAcrC,CAACJ,OAAD,CAdqC,CAAvC,CAiBA,GAAIY,CAAAA,cAAc,CAAGb,MAAM,CAACc,MAAP,CAAc,SAACC,IAAD,QAASA,CAAAA,IAAI,CAACC,WAAd,EAAd,CAArB,CAEA,mBACE,YAAK,SAAS,CAAC,cAAf,UACGH,cAAc,CAACI,GAAf,CAAmB,SAACF,IAAD,CAAOG,KAAP,CAAiB,CACnC,GAAIH,IAAI,CAACC,WAAT,CAAsB,CACpB,GAAIE,KAAK,GAAKL,cAAc,CAACM,MAAf,CAAwB,CAAtC,CAAyC,CACvC,mBACE,YAAK,GAAG,CAAEf,mBAAV,uBACE,KAAC,SAAD,EAAW,KAAK,CAAEW,IAAlB,EADF,EAAoCG,KAApC,CADF,CAKD,CAND,IAMO,CACL,mBACE,kCACE,KAAC,SAAD,EAAW,KAAK,CAAEH,IAAlB,EADF,EAAWG,KAAX,CADF,CAKD,CACF,CACD,MAAO,KAAP,CACD,CAjBA,CADH,EADF,CAsBD","sourcesContent":["import React, { useRef, useCallback } from \"react\";\nimport EachPhoto from \"./EachPhoto\";\n\nexport default function Results(props) {\n  const { photos, hasMore, setPageNumber } = props;\n  //when we rerender the component, everything change, but by using useRef(). This function return one object with property \"current\" with the value of null\n  const observer = useRef();\n\n  //the function inside callback function will happen just when the variable inside of [] changes. Really similar to useEffect BUT IS CONNECT WITH SOME VARIABLE AND STORED INSIDE OF IT.\n  //node refers to the <div> which was returned element\n  const lastPhotoElementRef = useCallback(\n    (node) => {\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting && hasMore) {\n          setPageNumber((prevPageNumber)=>prevPageNumber+1)\n        }\n      });\n      if (node) {\n        observer.current.observe(node);\n      }\n    },\n    [hasMore]\n  );\n\n  let filteredPhotos = photos.filter((item)=> item.cover_photo);\n\n  return (\n    <div className=\"card-columns\">\n      {filteredPhotos.map((item, index) => {\n        if (item.cover_photo) {\n          if (index === filteredPhotos.length - 1) {\n            return (\n              <div ref={lastPhotoElementRef} key={index}>\n                <EachPhoto photo={item} />\n              </div>\n            );\n          } else {\n            return (\n              <div  key={index}>\n                <EachPhoto photo={item} />\n              </div>\n            );\n          }\n        }\n        return null;\n      })}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}