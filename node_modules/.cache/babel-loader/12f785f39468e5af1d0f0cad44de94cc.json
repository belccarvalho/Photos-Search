{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dci/Documents/React/PicPhotos/photos/src/components/Results.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useCallback } from \"react\";\nimport EachPhoto from \"./EachPhoto\";\nexport default function Results(props) {\n  _s();\n\n  const {\n    photos,\n    hasMore,\n    setPageNumber\n  } = props; //when we rerender the component, everything change, but by using useRef(). This function return one object with property \"current\" with the value of\n\n  const observer = useRef(); //the function inside callback function will happen just when the variable inside of [] changes. Really similar to useEffect BUT IS CONNECT WITH SOME VARIABLE AND STORED INSIDE OF IT.\n\n  const lastPhotoElementRef = useCallback(() => {\n    if (observer.current) {\n      observer.current.disconnet();\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-columns\",\n    children: props.photo.map((item, index) => {\n      if (item.cover_photo) {\n        if (index === photos.length - 1) {\n          return /*#__PURE__*/_jsxDEV(EachPhoto, {\n            ref: lastPhotoElementRef,\n            photo: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 15\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(EachPhoto, {\n            photo: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 20\n          }, this);\n        }\n      }\n\n      return null;\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Results, \"fro6iX44f14tJ4NrtV4G30Rfw9Y=\");\n\n_c = Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["/home/dci/Documents/React/PicPhotos/photos/src/components/Results.jsx"],"names":["React","useRef","useCallback","EachPhoto","Results","props","photos","hasMore","setPageNumber","observer","lastPhotoElementRef","current","disconnet","photo","map","item","index","cover_photo","length"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,WAAxB,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACrC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA;AAAnB,MAAqCH,KAA3C,CADqC,CAErC;;AACA,QAAMI,QAAQ,GAAGR,MAAM,EAAvB,CAHqC,CAIrC;;AACA,QAAMS,mBAAmB,GAAGR,WAAW,CAAC,MAAM;AAC5C,QAAIO,QAAQ,CAACE,OAAb,EAAsB;AACpBF,MAAAA,QAAQ,CAACE,OAAT,CAAiBC,SAAjB;AACD;AACF,GAJsC,EAIpC,EAJoC,CAAvC;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,cACGP,KAAK,CAACQ,KAAN,CAAYC,GAAZ,CAAgB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChC,UAAID,IAAI,CAACE,WAAT,EAAsB;AACpB,YAAID,KAAK,KAAKV,MAAM,CAACY,MAAP,GAAgB,CAA9B,EAAiC;AAC/B,8BACE,QAAC,SAAD;AAAW,YAAA,GAAG,EAAER,mBAAhB;AAAiD,YAAA,KAAK,EAAEK;AAAxD,aAA0CC,KAA1C;AAAA;AAAA;AAAA;AAAA,kBADF;AAGD,SAJD,MAIO;AACL,8BAAO,QAAC,SAAD;AAAuB,YAAA,KAAK,EAAED;AAA9B,aAAgBC,KAAhB;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD,KAXA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GA3BuBZ,O;;KAAAA,O","sourcesContent":["import React, { useRef, useCallback } from \"react\";\nimport EachPhoto from \"./EachPhoto\";\n\nexport default function Results(props) {\n  const { photos, hasMore, setPageNumber } = props;\n  //when we rerender the component, everything change, but by using useRef(). This function return one object with property \"current\" with the value of\n  const observer = useRef();\n  //the function inside callback function will happen just when the variable inside of [] changes. Really similar to useEffect BUT IS CONNECT WITH SOME VARIABLE AND STORED INSIDE OF IT.\n  const lastPhotoElementRef = useCallback(() => {\n    if (observer.current) {\n      observer.current.disconnet();\n    }\n  }, []);\n\n  return (\n    <div className=\"card-columns\">\n      {props.photo.map((item, index) => {\n        if (item.cover_photo) {\n          if (index === photos.length - 1) {\n            return (\n              <EachPhoto ref={lastPhotoElementRef} key={index} photo={item} />\n            );\n          } else {\n            return <EachPhoto key={index} photo={item} />;\n          }\n        }\n        return null;\n      })}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}